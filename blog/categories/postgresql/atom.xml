<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Postgresql | Data Tips and Tricks]]></title>
  <link href="http://dbcaptain.com/blog/categories/postgresql/atom.xml" rel="self"/>
  <link href="http://dbcaptain.com/"/>
  <updated>2015-11-26T12:29:02+02:00</updated>
  <id>http://dbcaptain.com/</id>
  <author>
    <name><![CDATA[Alexander Shereshevsky]]></name>
    <email><![CDATA[shereshevsky@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Postgres 9.5 Audit Tables Access]]></title>
    <link href="http://dbcaptain.com/blog/2015/11/24/Postgres%209.5%20audit%20tables%20access/"/>
    <updated>2015-11-24T16:55:00+02:00</updated>
    <id>http://dbcaptain.com/blog/2015/11/24/Postgres 9.5 audit tables access</id>
    <content type="html"><![CDATA[<p>The new PostgreSQL version (9.5) with updated event trigger code support interesting plugin developed by 2ndQuadrant - pgaudit [<a href="https://github.com/2ndQuadrant/pgaudit">https://github.com/2ndQuadrant/pgaudit</a>].
Can be used to audit all data access by users on table level (despite table was accessed using view or function).</p>

<h2>Use cases</h2>

<ul>
<li>Report showing only specific users actually access tables data (sometimes requered by regulaters).
For example, you can be asked to provide evidence only specific users can access applicative managment tables.
Since DB grants provides only snapshot of current state, full access log should be provided (preferably located on separate storage).</li>
<li>Discover real table usage - you want to reduce table permissions for users not really currently accesing the table.</li>
</ul>


<p>1) Add 9.5 repository to apt sources
edit <code>/etc/apt/sources.list.d/pgdg.list</code>
with <code>deb http://apt.postgresql.org/pub/repos/apt/ trusty-pgdg main 9.5</code></p>

<p>2) Install PostgreSQL 9.5
<code>
sudo apt-get install postgresql-9.5
</code></p>

<p>3) Clone and install extension
<code>
git clone git@github.com:2ndQuadrant/pgaudit.git
cd pgaudit
sudo make USE_PGXS=1 install
</code></p>

<p>4) Edit config file to include library and restart PostgreSQL
edit <code>/etc/postgresql/9.5/main/postgresql.conf</code>
with <code>shared_preload_libraries = 'pgaudit'</code>
<code>
sudo pg_ctlcluster 9.5 main restart
</code></p>

<p>5) Connect to server, create extension
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo su postgres
</span><span class='line'>$ psql -p5434
</span><span class='line'>psql (9.5beta2)
</span><span class='line'>Type &ldquo;help&rdquo; for help.&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;postgres=# create extension pgaudit;
</span><span class='line'>CREATE EXTENSION
</span><span class='line'>postgres=# ALTER DATABASE postgres SET pgaudit.log = &lsquo;read, write, user&rsquo;;
</span><span class='line'>ALTER DATABASE</span></code></pre></td></tr></table></div></figure></p>

<p>6) Check it
<code>
sudo tail -f /var/log/postgresql/postgresql-9.5-main.log
</code>
postgres=# create table table1(col1 int4);
CREATE TABLE
postgres=# insert into table1 values (1);
INSERT 0 1
&ndash; 2015-11-26 12:20:48 IST LOG:  AUDIT,2015-11-26 12:20:48.17969+02,postgres,postgres,postgres,WRITE,INSERT,TABLE,public.table1,insert into table1 values (1);
postgres=# create table table2 as select * from table1;
SELECT 1
&ndash; 2015-11-26 12:21:51 IST LOG:  AUDIT,2015-11-26 12:21:51.499926+02,postgres,postgres,postgres,WRITE,INSERT,TABLE,public.table2,create table table2 as select * from table1;
postgres=# select * from table1, table2;
 col1 | col1
&mdash;&mdash;+&mdash;&mdash;
    1 |    1
(1 row)
&ndash; 2015-11-26 12:22:45 IST LOG:  AUDIT,2015-11-26 12:22:45.795401+02,postgres,postgres,postgres,READ,SELECT,TABLE,public.table1,select * from table1, table2;
&ndash; 2015-11-26 12:22:45 IST LOG:  AUDIT,2015-11-26 12:22:45.795436+02,postgres,postgres,postgres,READ,SELECT,TABLE,public.table2,select * from table1, table2;
postgres=# create view view1 as select * from table1;
CREATE VIEW
postgres=# select * from view1;</p>

<h2> col1 </h2>

<pre><code>1
</code></pre>

<p>(1 row)
&ndash; 2015-11-26 12:24:54 IST LOG:  AUDIT,2015-11-26 12:24:54.091324+02,postgres,postgres,postgres,READ,SELECT,VIEW,public.view1,select * from view1;
&ndash; 2015-11-26 12:24:54 IST LOG:  AUDIT,2015-11-26 12:24:54.091362+02,postgres,postgres,postgres,READ,SELECT,TABLE,public.table1,select * from view1;
postgres=# create function function1 (int4) returns void as $$ insert into table1 (col1) values ($1) $$ language sql;
CREATE FUNCTION
postgres=# select function1(8);</p>

<h2> function1 </h2>

<p>(1 row)
&ndash; 2015-11-26 12:27:34 IST LOG:  AUDIT,2015-11-26 12:27:34.451274+02,postgres,postgres,postgres,WRITE,INSERT,TABLE,public.table1,select function1(8);
&ndash; 2015-11-26 12:27:34 IST CONTEXT:  SQL function &ldquo;function1&rdquo; statement 1</p>

<p><a href="https://github.com/pgaudit/pgaudit/blob/master/README.md">https://github.com/pgaudit/pgaudit/blob/master/README.md</a>
<a href="http://www.postgresql.org/message-id/5363390F.8040704@2ndquadrant.com">http://www.postgresql.org/message-id/5363390F.8040704@2ndquadrant.com</a>
<a href="http://pgaudit.org/">http://pgaudit.org/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install BaRman on PostgreSQL 9.4 Slave Server]]></title>
    <link href="http://dbcaptain.com/blog/2015/11/01/Install%20BaRman%20on%20PostgreSQL%209.4%20Slave%20server/"/>
    <updated>2015-11-01T12:43:15+02:00</updated>
    <id>http://dbcaptain.com/blog/2015/11/01/Install BaRman on PostgreSQL 9.4 Slave server</id>
    <content type="html"><![CDATA[<p>BaRman - Setup fail tolerant PostgreSQL with BaRman.</p>

<p>Desired Setup
```</p>

<hr />

<p>|            |                           |            |
| PostgreSQL |   Streaming Replication   | PostgreSQL |
| Master     | =======================>  | Slave and  |
|            |       Log Shipping        | BaRman     |
|            |                           |            |</p>

<hr />

<pre><code>
I'm not covering PostgreSQL replication setup in this document.
The only setup specific point - we will take backup from Slave server, not Master.
This way we will reduce network trafic and load from our PostgreSQL Master server.
To achive it we will use pgespresso extension (https://github.com/2ndquadrant-it/pgespresso),
enabling stop and start backup mode with  pgespresso_start_backup and pgespresso_stop_backup on Slave server.

So main points I want to achive:
1. WAL shipment to Slave server.
2. Full DB backup from Slave server.

## Install BaRman
Install barman package (will automatically check for Ubuntu version and use appropriate repository:
</code></pre>

<p>echo &ldquo;deb <a href="http://apt.postgresql.org/pub/repos/apt/">http://apt.postgresql.org/pub/repos/apt/</a> <code>lsb_release -c | \
awk '{print $2}'</code>-pgdg main&rdquo; > /etc/apt/sources.list.d/pgdg.list
apt-get update
apt-get install -y barman</p>

<pre><code>
## Install pgespresso
Both on Slave and Master servers:
</code></pre>

<p>sudo apt-get install postgresql-9.4-pgespresso</p>

<pre><code>
on master:
</code></pre>

<p>sudo su postgres
psql -c &ldquo;create extension pgespresso&rdquo;</p>

<pre><code>
## SSH keys exchange
Setup access with SSH key from Master to Slave with baman user.
postgres user on Master server should be able to send WAL files to barman user on Slave server,
so we will generate new ssh key on Master and add it to Slave server:

On Master:
</code></pre>

<p>sudo su postgres
ssh-keygen -t rsa -b 4096
cd ~/.ssh
cat id_rsa.pub >> authorized_keys
chmod 600 ~/.ssh/authorized_keys</p>

<pre><code>
you can use the defaults, enter, enter, enter
Now you have two files in /var/lib/postgresql/.ssh - id_rsa and id_rsa.pub.
The public key should be added to authorized_keys file on Slave server.
Copy content of id_rsa.pub.

On Slave:
</code></pre>

<p>sudo su barman
cd ~
mkdit .ssh
cat > ~/.ssh/authorized_keys</p>

<pre><code>
paste content of id_rsa.pub
</code></pre>

<p>^D
cat > ~/.ssh/id_rsa
paste content of id_rs
^D
chmod 700 ~/.ssh
chmod 600 ~/.ssh/authorized_keys
chmod 600 ~/.ssh/id_rsa</p>

<pre><code>
Now testing from Master:
</code></pre>

<p>sudo su postgres
ssh <a href="&#x6d;&#97;&#105;&#x6c;&#116;&#x6f;&#x3a;&#x62;&#x61;&#x72;&#109;&#97;&#x6e;&#64;&#x31;&#x35;&#x39;&#x2e;&#50;&#48;&#x33;&#x2e;&#49;&#52;&#x33;&#46;&#x32;&#x31;&#52;">&#98;&#x61;&#114;&#109;&#x61;&#x6e;&#64;&#49;&#53;&#57;&#x2e;&#50;&#48;&#x33;&#x2e;&#49;&#x34;&#51;&#x2e;&#50;&#49;&#52;</a></p>

<pre><code>
answer yes and if you see something like this:
</code></pre>

<p>Last login: Mon Nov  2 04:47:01 2015 from 10.13.1.2
barman@barman:~$</p>

<pre><code>
you are fine.
Your barman user should be able to connect to postgres user
ssh connection from barman user to postgres user should work as well
(it will be used for file level backups):
</code></pre>

<p>barman@barman:~$ ssh postgres@$SLAVE_HOST</p>

<pre><code>
### WAL shipment
On Slave create folder for incoming WAL files:
</code></pre>

<p>sudo mkdir -p /data/barman/oper/incoming
sudo chown -R barman.barman /data/barman</p>

<pre><code>
On Master enable archiving mode and add archive command in postgresql.conf
</code></pre>

<p>echo &ldquo;archive_mode = on
archive_command = &lsquo;rsync -a %p barman@10.10.10.10:/data/barman/oper/incoming/%f&rsquo;
wal_level = hot_standby&rdquo; >> /etc/postgresql/9.4/main/postgresql.conf</p>

<pre><code>
when 10.10.10.10 is the slave/barman server IP.
Restarting PostgreSQL to use new config:
</code></pre>

<p>service postgresql restart</p>

<pre><code>
test:
</code></pre>

<p>psql -Upostgres -c"select i into test from generate_series(1, 100000) i"</p>

<pre><code>
go to slave/barman server and check you have data in /data/barman/oper/incoming folder.

## BaRman config
Your barman config can be lake that:
</code></pre>

<p>[barman]
barman_home = /data/barman
barman_user = barman
log_file = /var/log/barman/barman.log
compression = gzip
reuse_backup = link
retention_policy = REDUNDANCY 4
bandwidth_limit = 4000
network_compression = true
backup_options = concurrent_backup
last_backup_maximum_age = 1 DAY
[oper]
description =  &ldquo;Operational PostgreSQL Database Hot Standby&rdquo;
ssh_command = ssh <a href="&#109;&#97;&#105;&#108;&#x74;&#x6f;&#58;&#112;&#x6f;&#115;&#x74;&#x67;&#114;&#101;&#x73;&#x40;&#x31;&#x30;&#x2e;&#48;&#x2e;&#x30;&#46;&#49;">&#x70;&#x6f;&#115;&#x74;&#x67;&#x72;&#x65;&#x73;&#x40;&#x31;&#48;&#46;&#48;&#46;&#48;&#46;&#49;</a>
conninfo = host=10.0.0.1 user=postgres pasword=strong_password
minimum_redundancy = 1</p>

<pre><code>
when 10.0.0.1 - Slave host address and oper - logical database name you will use
with barman commands.

## BaRman Operations
On slave:
</code></pre>

<p>root@barman:~# sudo su barman
barman@barman:/data/barman/oper/incoming$ barman list-server
oper - Operational PostgreSQL Database Hot Standby</p>

<p>barman@barman:/data/barman/oper/incoming$ barman check oper
Server oper:
    PostgreSQL: OK
    archive_mode: OK
    wal_level: OK
    archive_command: OK
    continuous archiving: OK
    directories: OK
    retention policy settings: OK
    backup maximum age: FAILED (interval provided: 1 day, latest backup age: No available backups)
    compression settings: OK
    minimum redundancy requirements: FAILED (have 0 backups, expected at least 1)
    ssh: OK (PostgreSQL server)
    pgespresso extension: OK</p>

<p>barman@barman:/data/barman/oper/incoming$ barman backup oper
Starting backup for server oper in /data/barman/oper/base/20151102T072711
Backup start at xlog location: 0/E000028 (00000001000000000000000E, 00000028)
Copying files.
Copy done.
Asking PostgreSQL server to finalize the backup.
Backup size: 167.8 MiB. Actual size on disk: 167.8 MiB (-0.00% deduplication ratio).
Backup end at xlog location: 0/F000000 (00000001000000000000000E, 00000000)
Backup completed
Processing xlog segments for oper
  Older than first backup. Trashing file 00000001000000000000000D from server oper</p>

<p>barman@barman:/data/barman/oper/incoming$ barman status oper
Server oper:
    Description: Operational PostgreSQL Database Hot Standby
    Active: True
    Disabled: False
    PostgreSQL version: 9.4.5
    pgespresso extension: Available
    PostgreSQL Data directory: /var/lib/postgresql/9.4/main
    PostgreSQL &lsquo;archive_command&rsquo; setting: rsync -a %p barman@159.203.143.214:/data/barman/oper/incoming/%f
    Last archived WAL: 00000001000000000000000E.00000028.backup, at Mon Nov  2 07:27:31 2015
    Current WAL segment: 00000001000000000000000F
    Failures of WAL archiver: 0
    Server WAL archiving rate: 0.00/hour
    Retention policies: enforced (mode: auto, retention: REDUNDANCY 4, WAL retention: MAIN)
    No. of available backups: 1
    First available backup: 20151102T072711
    Last available backup: 20151102T072711
    Minimum redundancy requirements: satisfied (1/1)</p>

<p>```</p>

<p><a href="https://github.com/2ndquadrant-it/pgespresso">https://github.com/2ndquadrant-it/pgespresso</a>
<a href="http://docs.pgbarman.org/release/1.5.0/#installation">http://docs.pgbarman.org/release/1.5.0/#installation</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Upgrade PostgreSQL 9.3 to 9.4 on Mater-slave Replication Cluster]]></title>
    <link href="http://dbcaptain.com/blog/2015/10/30/Upgrade%20PostgreSQL%209.3%20to%209.4%20on%20mater-slave%20replication%20cluster/"/>
    <updated>2015-10-30T16:43:15+02:00</updated>
    <id>http://dbcaptain.com/blog/2015/10/30/Upgrade PostgreSQL 9.3 to 9.4 on mater-slave replication cluster</id>
    <content type="html"><![CDATA[<h3>Preparations:</h3>

<p>backup DB cluster
backup config:</p>

<pre><code>mkdir ~/pg_config_backup
sudo cp /etc/postgresql/9.3/main/* ~/pg_config_backup
</code></pre>

<p>add extra package if missing:</p>

<pre><code>sudo apt-get update
sudo apt-get install postgresql-server-dev-9.3
</code></pre>

<p>check correct repository setup:</p>

<pre><code>echo "deb http://apt.postgresql.org/pub/repos/apt/ wheezy-pgdg main" &gt;&gt; /etc/apt/sources.list.d/pgdg.list
sudo apt-get install wget ca-certificates
wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
</code></pre>

<h3>Install 9.4 packages and create the new cluster:</h3>

<pre><code class="">sudo apt-get update
sudo apt-get install postgresql-9.4 postgresql-contrib-9.4 postgresql-client-9.4 postgresql-9.4-pgespresso postgresql-server-dev-9.4
</code></pre>

<p>Drop 9.4 cluster if created by installer</p>

<pre><code class="">pg_dropcluster 9.4 main
</code></pre>

<p>change config to 9.4</p>

<pre><code>cd /etc/postgresql
rm -rf 9.4
cp -R 9.3/ 9.4
sed -i 's/9.3/9.4/g' postgresql.conf
grep '9.' postgresql.conf
</code></pre>

<p>Initialize the new PostgreSQL 9.4 cluster:</p>

<pre><code>sudo chown -R  postgres.postgres /etc/postgresql
sudo chown -R  postgres.postgres /data/postgresql
sudo su postgres
pg_createcluster -e UTF8 -p 5433 -d /data/postgresql/9.4/main 9.4 main
</code></pre>

<p>start:</p>

<pre><code>pg_ctlcluster 9.4 main start
</code></pre>

<p>check:</p>

<pre><code>postgres=# select datcollate, datctype from pg_database where datname = 'template0';
 datcollate  |  datctype   
-------------+-------------
 en_US.UTF-8 | en_US.UTF-8
(1 row)
^D
</code></pre>

<h3>stop running clusters</h3>

<pre><code>sudo pg_lsclusters
sudo service postgresql stop
sudo mv /etc/init.d/postgresql /etc/init.d/postgresql.
</code></pre>

<h3>run pg_upgrade</h3>

<pre><code>cd /tmp
</code></pre>

<p>check:</p>

<pre><code>sudo -H -u postgres /usr/lib/postgresql/9.4/bin/pg_upgrade \
   -b /usr/lib/postgresql/9.3/bin \
   -B /usr/lib/postgresql/9.4/bin \
   -d /data/postgresql/9.3/main \
   -D /data/postgresql/9.4/main \
   -o ' -c config_file=/etc/postgresql/9.3/main/postgresql.conf' \
   -O ' -c config_file=/etc/postgresql/9.4/main/postgresql.conf' \
   -p 5432 \
   -P 5433 \
   --check \
   --verbose \
   --retain
</code></pre>

<p>execute:</p>

<pre><code>sudo -H -u postgres /usr/lib/postgresql/9.4/bin/pg_upgrade \
   -b /usr/lib/postgresql/9.3/bin \
   -B /usr/lib/postgresql/9.4/bin \
   -d /data/postgresql/9.3/main \
   -D /data/postgresql/9.4/main \
   -o ' -c config_file=/etc/postgresql/9.3/main/postgresql.conf' \
   -O ' -c config_file=/etc/postgresql/9.4/main/postgresql.conf' \
   -p 5432 \
   -P 5433 \
   --verbose \
   --retain \
   --jobs=4
</code></pre>

<h3>change 9.4 port to 5432</h3>

<pre><code>sudo sed -i 's/5433/5432/g' /etc/postgresql/9.4/main/postgresql.conf
sudo sed -i 's/5432/5433/g' /etc/postgresql/9.3/main/postgresql.conf
</code></pre>

<p>remove /var/lib/postgresql/9.4/main</p>

<pre><code>sudo mv /etc/init.d/postgresql. /etc/init.d/postgresql
pg_ctlcluster 9.4 main start
</code></pre>

<h3>(optioanl) Remove the old packages</h3>

<pre><code>dpkg -l | grep postgresql
apt-get remove postgresql-9.3 postgresql-client-9.3 postgresql-contrib-9.3
</code></pre>

<h3>Analyze and drop old</h3>

<pre><code>sudo su  postgres
/tmp/analyze_new_cluster.sh
or /usr/lib/postgresql/9.4/bin/vacuumdb -dbluevine -Upostgres -h127.0.0.1 
/tmp/delete_old_cluster.sh
</code></pre>

<h3>On slave:</h3>

<p>backup configs:</p>

<pre><code>mkdir ~/pg_config_backup
sudo cp /etc/postgresql/9.3/main/* ~/pg_config_backup
</code></pre>

<p>Install 9.4 packages and create the new cluster:</p>

<pre><code>sudo apt-get update
sudo apt-get install postgresql-9.4 postgresql-contrib-9.4 postgresql-client-9.4 postgresql-9.4-pgespresso postgresql-server-dev-9.4
pg_dropcluster 9.4 main --stop
mkdir  /data/postgresql/9.4/main
sudo chown -R  postgres.postgres /data/postgresql
cd /etc/postgresql
rm -rf 9.4
cp -R 9.3/ 9.4
</code></pre>

<h3>On master:</h3>

<pre><code>psql -U postgres -c "select pg_start_backup('clone',true)"
rsync -av --exclude pg_xlog --exclude postgresql.conf --exclude postgresql.pid \ 
     /data/postgresql/9.4/*  $SLAVE_HOST:/data/postgresql/9.4/
psql -U postgres -c "select pg_stop_backup()"
rsync -av /data/postgresql/9.4/main/pg_xlog $SLAVE_HOST:/data/postgresql/9.4/main/
</code></pre>

<h3>On slave:</h3>

<p>recovery.conf in /data/postgres/9.4/main should look like this:</p>

<pre><code>standby_mode = 'on'
primary_conninfo = 'host=$MASTER_HOST port=5432 user=replicator password=strong_password sslmode=require'
trigger_file = '/tmp/postgresql.trigger'
</code></pre>

<p>sudo service postgresql start</p>

<h3>On master:</h3>

<p>sudo -u postgres psql -x -c &ldquo;select * from pg_stat_replication&rdquo;
sudo -u postgres psql -x -c &ldquo;select x id, x::text into test from generate_series(1, 1000000) x&rdquo;</p>

<p>check table exists on slave servers
check logs on all the servers</p>

<p><a href="http://www.depesz.com/2015/02/27/how-to-pg_upgrade/">http://www.depesz.com/2015/02/27/how-to-pg_upgrade/</a>
<a href="http://www.gab.lc/articles/migration_postgresql_9-3_to_9-4">http://www.gab.lc/articles/migration_postgresql_9-3_to_9-4</a>
<a href="http://www.postgresql.org/docs/9.4/static/upgrading.html">http://www.postgresql.org/docs/9.4/static/upgrading.html</a>
<a href="http://www.postgresql.org/docs/9.4/static/pgupgrade.html">http://www.postgresql.org/docs/9.4/static/pgupgrade.html</a>
<a href="https://wiki.postgresql.org/wiki/Using_pg_upgrade_on_Ubuntu/Debian">https://wiki.postgresql.org/wiki/Using_pg_upgrade_on_Ubuntu/Debian</a>
<a href="https://wiki.postgresql.org/wiki/Binary_Replication_Tutorial">https://wiki.postgresql.org/wiki/Binary_Replication_Tutorial</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Load OSM Data to PostgreSQL]]></title>
    <link href="http://dbcaptain.com/blog/2015/10/29/Load%20OSM%20data%20to%20PostgreSQL/"/>
    <updated>2015-10-29T16:43:15+02:00</updated>
    <id>http://dbcaptain.com/blog/2015/10/29/Load OSM data to PostgreSQL</id>
    <content type="html"><![CDATA[<p>I&rsquo;m using a small DigitalOcean droplet to load fresh OSM data to PostgreSQL.
The 2G memory instance is prefereable, change it just for OSM load and you can change it back after.
I&rsquo;m going to use current stable versions:</p>

<ul>
<li>PostgreSQL 9.3</li>
<li>PostGIS 2.1</li>
<li>osm2pgsql 0.84</li>
<li>Ubuntu 12.04.4 LTS</li>
</ul>


<p>As reference using osm2pgsql article in OSM wiki.
Reference for Postgres/PostGIS installation using PostgreSQL installation guides wiki article and Official Ubuntu Community Wiki.
This one was good too.</p>

<pre><code>$ echo "deb http://apt.postgresql.org/pub/repos/apt/ precise-pgdg main" &gt; /etc/apt/sources.list.d/postgresql.list
$ wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
$ sudo apt-get update
$ sudo apt-get upgrade
$ sudo apt-get install postgresql-9.3 postgresql-9.3-postgis-2.1 postgresql-contrib-9.3
</code></pre>

<p>Edit pg_hba.config for postgres to connect locally.</p>

<pre><code>$ sudo vi /etc/postgresql/9.3/main/pg_hba.conf
</code></pre>

<p>First not commented line will be like this (change peer to trust):
local all postgres trust</p>

<p>Restart postgresql service:</p>

<pre><code>$ sudo service postgresql restart
</code></pre>

<p>Now check you are able to connect to postgres (default) database:</p>

<pre><code>$ psql -U postgres
psql (9.3.4)
Type "help" for help.

postgres=#
</code></pre>

<p>Create new database to store OSM data:</p>

<pre><code>postgres=# create database osm;
CREATE DATABASE
</code></pre>

<p>Connect to created database and add PostGIS and H-store extensions:</p>

<pre><code>$ psql -U postgres -d osm
psql (9.3.4)
Type "help" for help.

osm=# create extension postgis;
CREATE EXTENSION
osm=# create extension hstore;
CREATE EXTENSION
</code></pre>

<p>Now we have the database we will use to load OSM data later.</p>

<p>Now let&rsquo;s compile osm2pgsql:</p>

<pre><code>$ sudo apt-get install build-essential libxml2-dev libgeos++-dev libpq-dev libbz2-dev proj libtool automake git lua5.2 liblua5.2-0 liblua5.2-dev liblua5.1-0 libprotobuf-c0-dev protobuf-c-compiler
$ wget https://github.com/openstreetmap/osm2pgsql/archive/0.84.0.zip
$ unzip 0.84.0.zip
$ rm 0.84.0.zip
$ cd osm2pgsql-0.84.0
$ ./autogen.sh &amp;&amp; ./configure &amp;&amp; make
$ sudo make install
</code></pre>

<p>Now let&rsquo;s download osm file we will use for import.
Here you can find different mirrors.</p>

<pre><code>wget http://download.geofabrik.de/north-america/us-northeast-latest.osm.bz2
</code></pre>

<p>And run osm2pgsql:</p>

<pre><code>bunzip2 -c us-northeast-latest.osm.bz2 | /usr/local/bin/osm2pgsql --slim -E 4326 -d osm -C 1500 -S /usr/share/osm2pgsql/default.style -U postgres --hstore /dev/stdin
</code></pre>

<p>And waiting &hellip;</p>
]]></content>
  </entry>
  
</feed>
